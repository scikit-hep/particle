[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "particle"
description = "Extended PDG particle data and MC identification codes"
readme = "README.rst"
requires-python = ">=3.7"
authors = [
    { name = "Eduardo Rodrigues", email = "eduardo.rodrigues@cern.ch" },
    { name = "Henry Schreiner", email = "henryfs@princeton.edu" },
]
maintainers = [
    { name = "Scikit-HEP", email = "scikit-hep-admins@googlegroups.com" },
]
keywords = [
    "HEP",
    "MC identification codes",
    "PDG",
    "PDGID",
    "particle",
    "particle data table",
    "particle properties",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: BSD License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering",
]
dependencies = [
    "attrs>=19.2",
    "hepunits>=2.0.0",
    "importlib-resources>=2.0;python_version<\"3.9\"",
    "typing-extensions;python_version<\"3.8\"",
    "deprecated"
]
dynamic = ["version"]

[project.optional-dependencies]
dev = [
    "pandas",
    "pytest-benchmark",
    "pytest>=6",
    "tabulate",
]
test = [
    "pandas",
    "pytest-benchmark",
    "pytest-cov",
    "pytest>=6",
    "tabulate",
]

[project.urls]
Homepage = "https://github.com/scikit-hep/particle"


[tool.hatch]
version.source = "vcs"
build.hooks.vcs.version-file = "src/particle/version.py"


[tool.mypy]
warn_unused_configs = true
warn_unused_ignores = true
python_version = "3.9"
files = "src"
strict = true
show_error_codes = true
warn_unreachable = true
enable_error_code = [
    "ignore-without-code",
    "redundant-expr",
    "truthy-bool",
]

[[tool.mypy.overrides]]
module = [
    "pandas.*",
    "numpy.*",
]
ignore_missing_imports = true


[tool.pytest.ini_options]
minversion = "6.0"
testpaths = ["tests"]
junit_family = "xunit2"
log_cli_level = "info"
addopts = [
    "--benchmark-disable",
    "-ra",
    "--showlocals",
    "--strict-markers",
    "--strict-config",
]
filterwarnings = [
    "error",
]

[tool.pylint]
master.py-version = "3.7"
reports.output-format = "colorized"
similarities.ignore-imports = "yes"
master.jobs = "0"
messages_control.enable = [
    "useless-suppression",
]
messages_control.disable = [
    "duplicate-code",
    "fixme",
    "invalid-name",
    "invalid-unary-operand-type",
    "line-too-long",
    "missing-class-docstring",
    "missing-function-docstring",
    "missing-module-docstring",
    "too-few-public-methods",
    "too-many-arguments",
    "too-many-branches",
    "too-many-instance-attributes",
    "too-many-lines",
    "too-many-locals",
    "too-many-public-methods",
    "too-many-return-statements",
    "too-many-statements",
    "unsubscriptable-object",
    "unsupported-assignment-operation",
    "unused-argument", # Handled by Ruff
    "wrong-import-position",
]


[tool.ruff]
select = [
    "E", "F", "W", # flake8
    "B", "B904",   # flake8-bugbear
    "I",           # isort
    "ARG",         # flake8-unused-arguments
    "C4",          # flake8-comprehensions
    "ICN",         # flake8-import-conventions
    "ISC",         # flake8-implicit-str-concat
    "PGH",         # pygrep-hooks
    "PIE",         # flake8-pie
    "PL",          # pylint
    "PT",          # flake8-pytest-style
    "RET",         # flake8-return
    "RUF",         # Ruff-specific
    "SIM",         # flake8-simplify
    "T20",         # flake8-print
    "UP",          # pyupgrade
    "YTT",         # flake8-2020
]
ignore = [
    "B905",
    "E402",
    "E501",
    "RUF001", # Ambiguous unicode
    "RUF002", # Ambiguous unicode docstring
    "PLR",    # Design related pylint codes
    "PT013",  # Importing approx from pytest is fine
]
target-version = "py37"
src = ["src"]
unfixable = [
  "T20",  # Removes print statements
  "F841", # Removes unused variables
]
isort.required-imports = ["from __future__ import annotations"]

[tool.ruff.mccabe]
max-complexity = 24

[tool.ruff.per-file-ignores]
"src/particle/__main__.py" = ["T20"]
